#ifndef D_LIGHTING_FRAGINC
#define D_LIGHTING_FRAGINC

uniform vec3 uGlobalAmbient = vec3(0.1, 0.05, 0.01);
uniform vec3 uLightDiffuse = vec3(0.8);
uniform vec3 uMaterialDiffuse = vec3(1.0);
uniform vec3 uMaterialAmbient = vec3(0.0);

// In this one, we encode the color in the first three components and the shininess in the alpha component.
uniform vec4 uMaterialSpecular = vec4(1.0, 1.0, 1.0, 50.0);

smooth in vec3 EyeVector;
smooth in vec3 LightDir;

vec3 getLightingColor(in vec3 in_normal)
{
    // We can assume in_normal is normalized already.

    vec3 L = normalize(LightDir);
    vec3 E = normalize(EyeVector);

    // Ambient term
    vec3 ambient = uGlobalAmbient * uMaterialAmbient;
    // Here, we make it a bit differently than usual Blinn, we'll see later if it indeed looks better or not :)
//     vec3 ambient = (1.0 - nDotL) * uGlobalAmbient;

    // Diffuse term
    float nDotL = dot(in_normal, L);
    vec3 diffuse = uLightDiffuse * uMaterialDiffuse * nDotL;
//     vec3 diffuse = vec3(0.0);

    // Specular term
    vec3 r = normalize(-reflect(L, in_normal));
    vec3 specular = uMaterialSpecular.rgb * pow(clamp(dot(r, E), 0.0, 1.0), uMaterialSpecular.a);
//     vec3 specular = vec3(0.0);

    return clamp(ambient + diffuse + specular, 0.0, 1.0);
}

#endif // D_LIGHTING_FRAGINC
